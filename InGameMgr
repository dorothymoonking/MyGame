using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;

enum JoyStickType
{
    Fixed = 0,          //m_JoyStickObj.activeSelf == true && m_JoyStickPickPanel.activeSelf == false
    Flexible = 1,       //m_JoyStickObj.activeSelf == true && m_JoyStickPickPanel.activeSelf == ture
    FlexibleOnOff = 2   //m_JoyStickObj.activeSelf == false && m_JoyStickPickPanel.activeSelf == true
}

//Fixed : 조이패드 고정
//Flexible : 터치된 위치에 조이패드 이동
//FlexibleOnOff : 터치시 위치에 조이패드 등장

public class InGame_Mgr : MonoBehaviour
{
    public static CameraCtrl RefCamCrtl = null;

    public Button m_BackBtn; // 로비로 이동하는 백버튼

    // UserInfo UI 관련 변수
    private bool m_UInfo_OnOff = false;
    public Button m_UserInfo_Btn = null;
    public GameObject m_UserInfoPanel = null;
    public Text m_UserHPTxt;
    public Text m_GoldTxt;
    public Text m_MonKillTxt;
    public Text m_SkillTxt;

    int m_MonKillCount = 0; // 몬스터 킬수 변수

    //public Button m_InVen_Btn = null; // 인벤토리 버튼

    [HideInInspector] public HeroCtrl m_refHero = null;
    Vector3 a_PickVec = Vector3.zero;

    public ClickMark m_ClickMark = null;
    Vector3 a_CacVLen = Vector3.zero;

    public static GameObject m_BulletObj = null;
    float m_AttSpeed = 0.1f;  //주인공 공속
    float m_CacAtTick = 0.0f; //기관총 발사 틱 만들기...

    // 환경설정 Dlg 관련 변수
    public Button m_CfgBtn = null;
    public GameObject Canvas_Dialog = null;
    private GameObject m_ConfigBoxObj = null;

    JoyStickType m_JoyStickType = JoyStickType.Fixed;

    // Fixed JoyStick 처리 부분
    [Header("-------- Fixed JoyStick --------")] //inspector 창에서 스크립트부분을 구분하는 방법
    public GameObject m_JoySBackObj = null;
    public Image m_JoyStickImg = null;
    float m_Radius = 0.0f;
    Vector3 m_OrignPos = Vector3.zero;
    Vector3 m_Axis = Vector3.zero;
    Vector3 m_JsCacVec = Vector3.zero;
    float m_JsCacDist = 0.0f;

    // Flexible JoyStick 처리 부분
    [Header("-------- Flexible JoyStick --------")]
    public GameObject m_JoyStickPickPanel = null;
    private Vector2 posJoyBack;
    private Vector2 dirStick;

    // 머리위에 데미지 띄우기용 변수 선언
    Vector3 a_StCacPos = Vector3.zero;
    [Header("-------- Damege Text --------")]
    public Transform m_HUD_Canvas = null;
    public GameObject m_DamegeObj = null;

    // ScrollView OnOff
    [Header("-------- ScrollView OnOff --------")]
    public Button m_InVen_Btn = null;
    public Transform m_InVenScrollTr = null;
    private bool m_InVen_ScOnOff = false;
    private float m_ScSpeed = 2500.0f;
    private Vector3 m_ScOnPos = new Vector3(0.0f, 0.0f, 0.0f);
    private Vector3 m_ScOffPos = new Vector3(470.0f, 0.0f, 0.0f);
    
    public Transform m_MkInvenContent = null;
    public GameObject m_MkItemMyNode = null;
    public Button m_ItemSell_Btn = null;

    [Header("-------- ItemIconIme --------")]
    public Texture[] m_ItemImg = null;

    [Header("-------- GameOver --------")]
    public Text UserCoin_txt = null;
    public Text DeadMon_txt = null;
    public Button ReStart_Btn = null;
    
    void Awake()
    {
        //QualitySettings.vSyncCount = 0;
        Application.targetFrameRate = 60;
    }

    // Start is called before the first frame update
    void Start()
    {
        Debug.Log(Time.timeScale);

        SoundMgr.Instance.PlayBGM("sound_bgm_island_001");
       
        RefCamCrtl = FindObjectOfType<CameraCtrl>();

        GlobalUserData.LoadGameInfo();
        ReflashInGameItemScV();

        if (m_BackBtn != null)
        {
            m_BackBtn.onClick.AddListener(() =>
            {
                SoundMgr.Instance.PlayBGM("sound_bgm_title_001");
                Debug.Log("BGM : "+SoundMgr.Instance.m_GUI_SdObj);
                UnityEngine.SceneManagement.SceneManager.LoadScene("LobbyScene");
            });
        }
        //UserInfoPanel
        m_UInfo_OnOff = m_UserInfoPanel.activeSelf;

        if(m_UserInfo_Btn != null && m_UserInfoPanel != null)
        {
            m_UserInfo_Btn.onClick.AddListener(() => {
                m_UInfo_OnOff = !m_UInfo_OnOff;
                m_UserInfoPanel.SetActive(m_UInfo_OnOff);
            });
        }

        m_refHero = FindObjectOfType<HeroCtrl>(); // HeroCtrl가 하나만 있을때만 사용 가능

        //m_refHero = FindObjectOfType<HeroCtrl>(); =
        //GameObject a_HObj = GameObject.Find("HeroMash");
        //if (a_HObj != null)
        //    m_refHero =  a_HObj.GetComponent<HeroCtrl>();

        ReflashUserInfoHP();

        m_BulletObj = Resources.Load("Prefab/BulletObj") as GameObject;

        // 환경설정 Dlg 관련 구현 부분
        if (m_CfgBtn != null)
            m_CfgBtn.onClick.AddListener(() =>
            {
                if (m_ConfigBoxObj == null)
                    m_ConfigBoxObj = Resources.Load("Prefab/ConfigBox") as GameObject;

                GameObject a_CfgBoxObj = (GameObject)Instantiate(m_ConfigBoxObj);
                a_CfgBoxObj.transform.SetParent(Canvas_Dialog.transform, false);
                // false로 해야 로컬 프리팹에 설정된 좌표를 유지한체 차일드로 붙게된다.
                Time.timeScale = 0.0f;
            });

        // Fixed JoyStick 처리 부분
        if (m_JoySBackObj != null && m_JoyStickImg != null && m_JoySBackObj.activeSelf == true
            && m_JoyStickPickPanel.activeSelf == false)
        {
            m_JoyStickType = JoyStickType.Fixed;

            Vector3[] v = new Vector3[4];
            m_JoySBackObj.GetComponent<RectTransform>().GetWorldCorners(v);
            // [0] : 좌측하단 [1] : 좌측상단 [2] : 우측상단 [3] : 우측하단
            // v[0] : 좌측하단이 0, 0 좌표인 스크린 좌표(Screen.width, Screen.height)를 기준으로
            m_Radius = v[2].y - v[0].y; // m_JoySBackObj 이미지의 높이 값을 구한다.
            m_Radius = m_Radius / 3.0f; // 높이 값의 1/3 정도의 반지름을 계산한다.(조이스틱의 이동반경)

            m_OrignPos = m_JoyStickImg.transform.position;  // 스틱의 초기화 좌표.
            // position : 월드에서의 좌표, localPosion : 부모에서의 좌표를 가져온다.(부모Obj가 있을시)

            // 스크립트로만 대기하고자 할 때
            EventTrigger trigger = m_JoySBackObj.GetComponent<EventTrigger>();
            // Inspector에서 GameObjeck.Find("Button");
            // 에 꼭 AddComponent --> EnventTrigger 가 되어 있어야 한다.
            EventTrigger.Entry entry = new EventTrigger.Entry();
            entry.eventID = EventTriggerType.Drag;
            entry.callback.AddListener((data) => { OnDragJoyStick((PointerEventData)data); });
            trigger.triggers.Add(entry);

            entry = new EventTrigger.Entry();
            entry.eventID = EventTriggerType.EndDrag;
            entry.callback.AddListener((data) => { OnEndDragJoyStick((PointerEventData)data); });
            trigger.triggers.Add(entry);
        }//if(m_JoySBackObj != null...)

        //Fixible JoyStick 처리 부분
        if (m_JoyStickPickPanel != null && m_JoySBackObj != null
            && m_JoyStickImg != null
            && m_JoyStickPickPanel.activeSelf == true)
        {
            if(m_JoySBackObj.activeSelf == true)
            {
                m_JoyStickType = JoyStickType.Flexible;
            }
            else
            {
                m_JoyStickType = JoyStickType.FlexibleOnOff;
            }

            EventTrigger a_JBTrigger = m_JoySBackObj.GetComponent<EventTrigger>();
            if(a_JBTrigger != null)
            {
                Destroy(a_JBTrigger);
            }// 조이스틱 백에 설치되어 있는 이벤트 트리거는 제거한다.

            Vector3[] v = new Vector3[4];
            m_JoySBackObj.GetComponent<RectTransform>().GetWorldCorners(v);
            m_Radius = v[2].y - v[0].y;
            m_Radius = m_Radius / 3.0f;

            m_OrignPos = m_JoyStickImg.transform.position;
            m_JoySBackObj.GetComponent<Image>().raycastTarget = false;
            m_JoyStickImg.raycastTarget = false;

            EventTrigger trigger = m_JoyStickPickPanel.GetComponent<EventTrigger>(); 
            // Inspector에서 m_JoyStickPickPanel 에 꼭 AddComponent --> EventTrigger가
            // 되어 있어야 한다.
            EventTrigger.Entry entry = new EventTrigger.Entry();
            entry.eventID = EventTriggerType.PointerDown;
            entry.callback.AddListener((data) =>{
                OnPointerDown_Flx((PointerEventData)data);
            });
            trigger.triggers.Add(entry);

            entry = new EventTrigger.Entry();
            entry.eventID = EventTriggerType.PointerUp;
            entry.callback.AddListener((data) =>{
                OnPointerUp_Flx((PointerEventData)data);
            });
            trigger.triggers.Add(entry);

            entry = new EventTrigger.Entry();
            entry.eventID = EventTriggerType.Drag;
            entry.callback.AddListener((data) => {
                OnDragJoyStick_Flx((PointerEventData)data);
            });
            trigger.triggers.Add(entry);
        }

        // ScrollView OnOff
        if (m_InVen_Btn != null)
        {
            m_InVen_Btn.onClick.AddListener(() =>
            {
                m_InVen_ScOnOff = !m_InVen_ScOnOff;
                m_ItemSell_Btn.gameObject.SetActive(m_InVen_ScOnOff);
            });
        }

        // 아이템 판매 버튼 처리
        if (m_ItemSell_Btn != null)
            m_ItemSell_Btn.onClick.AddListener(ItemSellMethod);

    }//void Start()

    // Update is called once per frame
    void Update()
    {
        // 총알 발사 코드
        m_CacAtTick = m_CacAtTick - Time.deltaTime;
        if (m_CacAtTick <= 0.0f)
            m_CacAtTick = 0.0f;

        if(Input.GetMouseButton(1))
        {
            if(m_CacAtTick <= 0.0f)
            {
                //if(IsPointerOverUIObject() == false)//UI가 선택되면 총알을 발사하지 않는다.
                {
                    m_refHero.MsShooting(
                            Camera.main.ScreenToWorldPoint(
                                                        Input.mousePosition));
                }//if(IsPointerOverUIObject() == false)

                m_CacAtTick = m_AttSpeed;
            }//if(m_CacAtTick <= 0.0f)
        }

        // 마우스 이동 코드
        if(Input.GetMouseButtonDown(0)) // 마우스 왼쪽 버튼 클릭식...(모바일에서 화면 터치시)
        {
            if (IsPointerOverUIObject() == false)//UI가 선택되면 이동하지 않는다.
            {
                a_PickVec = Camera.main.ScreenToWorldPoint(Input.mousePosition);
                m_refHero.MsPicking(a_PickVec);

                if (m_ClickMark != null)
                {
                    m_ClickMark.transform.position =
                                    new Vector3(a_PickVec.x, 0.3f, a_PickVec.z);
                    m_ClickMark.gameObject.SetActive(true);
                    m_ClickMark.ResetEff();
                }

            }//if (IsPointerOverUIObject() == false)

        }//if(Input.GetMouseButtonDown(0))

        SvActionUpdate();
        CLMarkUpdate();
        if (m_refHero.m_CurHP <= 0)
            GameOver();
    }//void Update()

    void CLMarkUpdate()
    {
        // 클릭마크 끄기
        if (m_ClickMark == null)
            return;

        if (m_ClickMark.gameObject.activeSelf == false)
            return;

        if(m_refHero != null) // 아직 죽지 않았을 때
        {
            a_CacVLen = m_refHero.transform.position -
                                        m_ClickMark.transform.position;

            a_CacVLen.y = 0.0f;

            if (a_CacVLen.magnitude < 1.0f)
                m_ClickMark.gameObject.SetActive(false);

            if (m_refHero.IsKJMove() == true)
            {
                m_ClickMark.gameObject.SetActive(false);
                Debug.Log(m_refHero.IsKJMove());
            }
        }
        else 
        {
            m_ClickMark.gameObject.SetActive(false);
        }

    }//void CLMarkUpdate()

    //UI가 선택됬는지 확인하는 함수
    PointerEventData a_EDCurPos;
    public bool IsPointerOverUIObject()
    {
        a_EDCurPos = new PointerEventData(EventSystem.current);
        //PC ,안드로이드, IOS인지 확인해주는 부분
#if !UNITY_EDITOR && (UNITY_IPHONE || UNITY_ANDROID)

        //using System.Collections.Generic;
        List<RaycastResult> results = new List<RatCastResult>();
        for(int i = 0; i < Input.touchCount; i++)
        {
            a_EDCurPos.position = Input.GetTouch(i).position;
            results.Clear();
            EventSystem.current.RaycastAll(a_EDCurPos, results);
            if (0 < results.Count)
                return true;

        }
        return false;
#else
        a_EDCurPos.position = Input.mousePosition;
        //using System.Collections.Generic;
        List<RaycastResult> results = new List<RaycastResult>();
        EventSystem.current.RaycastAll(a_EDCurPos, results);
        return results.Count > 0;
#endif

    }//public bool IsPointerOverUIObject()

    public void ReflashUserInfoHP()
    {
        m_UserHPTxt.text = "HP : " + m_refHero.m_CurHP.ToString() + " / " +
                                     m_refHero.m_MaxHP.ToString();
    }

    public void AddMonKill(int a_Val = 1)
    {
        m_MonKillCount = m_MonKillCount + a_Val;
        m_MonKillTxt.text = "x " + m_MonKillCount.ToString();
    }

    public void AddGold(int a_val = 100)
    {
        GlobalUserData.m_GoldCount = GlobalUserData.m_GoldCount + a_val;
        string a_GlodStr = string.Format("{0:N0}", GlobalUserData.m_GoldCount);
        m_GoldTxt.text = "x " + a_GlodStr;

        PlayerPrefs.SetInt("GoldCount", GlobalUserData.m_GoldCount); // 값 저장
    }

    public void AddSkill(int a_val = 1)
    {
        GlobalUserData.m_SkillCount = GlobalUserData.m_SkillCount + a_val;
        m_SkillTxt.text = "x " + GlobalUserData.m_SkillCount.ToString();

        PlayerPrefs.SetInt("SkillCount", GlobalUserData.m_SkillCount); // 값 저장
    }

    // Fixed JoyStick 처리 부분
    void OnDragJoyStick(PointerEventData _data) // Delegate
    {
        if (m_JoyStickImg == null)
            return;

        m_JsCacVec = Input.mousePosition - m_OrignPos; // 조이스틱의 움직임 계산
        m_JsCacVec.z = 0.0f;
        m_JsCacDist = m_JsCacVec.magnitude; // magnitude : 백터의 크기(중점에서부터 이동거리까지)
        m_Axis = m_JsCacVec.normalized; // normalized : 방향백터(중점에서부터 이동거리까지)

        // 조이스틱 백그라운드를 벗어나지 못하게 막는 부분
        if (m_Radius < m_JsCacDist)
        {
            m_JoyStickImg.transform.position =
                                    m_OrignPos + m_Axis * m_Radius;
        }
        else
        {
            m_JoyStickImg.transform.position =
                                    m_OrignPos + m_Axis * m_JsCacDist;
        }

        if (1.0f < m_JsCacDist)
            m_JsCacDist = 1.0f;

        // 캐릭터 이동처리
        if (m_refHero != null)
            m_refHero.SetJoyStickMv(m_JsCacDist, m_Axis);
    }

    void OnEndDragJoyStick(PointerEventData _data) // Delegate
    {
        if (m_JoyStickImg == null)
            return;

        m_Axis = Vector3.zero;
        m_JoyStickImg.transform.position = m_OrignPos;

        m_JsCacDist = 0.0f;

        // 캐릭터 정지 처리
        if (m_refHero != null)
            m_refHero.SetJoyStickMv(0.0f, m_Axis);

    }

    // Flexible JoyStick 처리 부분
    void OnPointerDown_Flx(PointerEventData eventData) // Delegate
    {
        if (eventData.button != PointerEventData.InputButton.Left) // 마우스 왼쪽 버튼만
            return;

        if (m_JoySBackObj == null)
            return;

        if (m_JoyStickImg == null)
            return;

        m_JoySBackObj.transform.position = eventData.position;
        m_JoyStickImg.transform.position = eventData.position;

        m_JoySBackObj.SetActive(true);
        //m_JoyStickImg.gameObject.SetActive(true);
    }

    void OnPointerUp_Flx(PointerEventData eventData) // Delegate
    {
        if (eventData.button != PointerEventData.InputButton.Left) // 마우스 왼쪽 버튼만
            return;

        if (m_JoySBackObj == null)
            return;

        if (m_JoyStickImg == null)
            return;

        m_JoySBackObj.transform.position = m_OrignPos;
        m_JoyStickImg.transform.position = m_OrignPos;

        if(m_JoyStickType == JoyStickType.FlexibleOnOff)
        {
            m_JoySBackObj.SetActive(false); // 꺼진 상태로 시작하는 방식일 때는 활성화 false
        }

        m_Axis = Vector3.zero;
        m_JsCacDist = 0.0f;
        //m_JoyStickImg.gameObject.SetActive(false);
        //캐릭터 정지 처리
        if(m_refHero != null)
        {
            m_refHero.SetJoyStickMv(0.0f, Vector3.zero);
        }
    }

    void OnDragJoyStick_Flx(PointerEventData eventData) // Delegate
    {
        if (eventData.button != PointerEventData.InputButton.Left) // 마우스 왼쪽 버튼만
            return;

        //eventData.position 현재 마우스의 월드 좌표
        if (m_JoyStickImg == null)
            return;

        posJoyBack = (Vector2)m_JoySBackObj.transform.position;
        //조이스틱 백 그라운드 현재 위치 기준
        m_JsCacDist = Vector2.Distance(posJoyBack, eventData.position); // 거리
        dirStick = eventData.position - posJoyBack; // 방향

        if(m_Radius < m_JsCacDist)
        {
            m_JsCacDist = m_Radius;
            m_JoyStickImg.transform.position =
                (Vector3)(posJoyBack + (dirStick.normalized * m_Radius));
        }
        else
        {
            m_JoyStickImg.transform.position = (Vector3)eventData.position;
        }

        if (1.0f < m_JsCacDist)
            m_JsCacDist = 1.0f;

        m_Axis = (Vector3)dirStick.normalized;

        if(m_refHero != null)
        {
            m_refHero.SetJoyStickMv(m_JsCacDist, m_Axis);
        }
    }

    public void DamegeTxt(int a_Value, Transform txtTr)
    {
        GameObject a_DamClone = (GameObject)Instantiate(m_DamegeObj);
        if(a_DamClone != null && m_HUD_Canvas != null)
        {
            a_StCacPos = new Vector3(txtTr.position.x, 0.8f,
                                     txtTr.position.z + 4.0f);
            a_DamClone.transform.SetParent(m_HUD_Canvas);
            DamegeText a_DamageTx = a_DamClone.GetComponent<DamegeText>();
            a_DamageTx.m_SavePos = a_StCacPos;
            a_DamageTx.m_DamageVal = (int)a_Value;
            a_DamClone.transform.position = a_StCacPos;
        }
    }

    void SvActionUpdate()
    {
        // Menu Scroll 연출
        if (m_InVen_ScOnOff == false)
        {
            if(m_InVenScrollTr != null)
                if(m_InVenScrollTr.localPosition.x < m_ScOffPos.x)
                {
                    m_InVenScrollTr.localPosition = 
                        Vector3.MoveTowards(m_InVenScrollTr.localPosition,
                                    m_ScOffPos, m_ScSpeed * Time.deltaTime);
                }
        }
        else 
        { 
            if(m_InVenScrollTr != null)
                if(m_ScOnPos.x < m_InVenScrollTr.localPosition.x)
                {
                    m_InVenScrollTr.localPosition =
                        Vector3.MoveTowards(m_InVenScrollTr.localPosition,
                                    m_ScOnPos, m_ScSpeed * Time.deltaTime);
                }
        }
    }//void SvActionUpdate()

    public void AddNodeScrollView(ItemValue a_Node)
    {
        GameObject m_ItemObj = (GameObject)Instantiate(m_MkItemMyNode);
        m_ItemObj.transform.SetParent(m_MkInvenContent, false);
        // false일 경우 : 로컬 기준의 정보를 유지한 채 차일드화된다.
        ItemNode a_MyItemInfo = m_ItemObj.GetComponent<ItemNode>();

        if (a_MyItemInfo != null)
            a_MyItemInfo.SetItemRsc(a_Node, this);

        m_MkInvenContent.GetComponent<RectTransform>().pivot =
                                        new Vector2(0.0f, 1.0f); // 스크롤뷰를 재정렬
    }//public void AddNodeScrollView(ItemValue a_Node)

    public void ReflashInGameItemScV() // InGame의 ScrollView 갱신
    {
        ItemNode[] a_MyNodeList =
            m_MkInvenContent.GetComponentsInChildren<ItemNode>(true);
        for (int ii = 0; ii < a_MyNodeList.Length; ii++)
        {
            Destroy(a_MyNodeList[ii].gameObject);
        }//for (int ii = 0; ii < a_MyNodeList.Length; ii++)

        for (int a_ii = 0; a_ii < GlobalUserData.g_ItemList.Count; a_ii++)
        {
            AddNodeScrollView(GlobalUserData.g_ItemList[a_ii]); // In Game Scroll View 아이템
        }//for (int a_ii = 0; a_ii < GlobalUserData.g_ItemList.Count; a_ii++)

    }//public void ReflashInGameItemScV()

    void ItemSellMethod()
    {
        // 스크롤뷰의 노드를 모두 돌면서 선택되어 있는 것들만 판매하고
        // 해당 유니크ID를 g_ItemList에서 찾아서 제거해 준다.
        ItemNode[] a_MyNodeList =
            m_MkInvenContent.GetComponentsInChildren<ItemNode>(true);
        for (int ii = 0; ii<a_MyNodeList.Length; ii++)
        {
            if (a_MyNodeList[ii].m_SelOnOff == false)
                continue;

            for (int a_bb = 0; a_bb < GlobalUserData.g_ItemList.Count; a_bb++)
            {
                if (a_MyNodeList[ii].m_UniqueID ==
                                    GlobalUserData.g_ItemList[a_bb].UniqueID)
                {
                    GlobalUserData.g_ItemList.RemoveAt(a_bb);
                    break;
                }//if (a_MyNodeList[ii].m_UniqueID == ...)

            }//for (int a_bb = 0; a_bb < GlobalUserData.g_ItemList.Count; a_bb++)

            Destroy(a_MyNodeList[ii].gameObject);

            AddGold(100);

        }//for (int ii = 0; ii < a_MyNodeList.Length; ii++)

        GlobalUserData.ReflashItemSave();

    }//void ItemSellMethod()

    void GameOver()
    {
        if (m_refHero.m_CurHP > 0)
            return;

        GameObject.Find("GameOverCanvas").transform.Find("GameOverPanel").gameObject.SetActive(true);
        Time.timeScale = 0;

        if (UserCoin_txt != null)
            UserCoin_txt.text = "x " + GlobalUserData.m_GoldCount.ToString();

        if (DeadMon_txt != null)
            DeadMon_txt.text = "x " + m_MonKillCount.ToString();

        if (ReStart_Btn != null)
        {
            ReStart_Btn.onClick.AddListener(() => {
                GlobalUserData.ClearGameInfo();
                m_refHero.m_CurHP = m_refHero.m_MaxHP;
                UnityEngine.SceneManagement.SceneManager.LoadScene("LobbyScene");
                Time.timeScale = 1.0f;
            });
        }
    }//void GameOver()
}
